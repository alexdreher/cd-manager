require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe AlbumsController do
  # http://www.michaelharrison.ws/weblog/?p=349
  include Devise::TestHelpers
  
  def mock_user(stubs={})
      @mock_user ||= mock_model(User, stubs).as_null_object
  end

  before(:each) do
      # mock up an authentication in the underlying warden library
      request.env['warden'] = mock(Warden, :authenticate => mock_user,
                                           :authenticate! => mock_user)
  end
  # endsnip

  def mock_album(stubs={})
    @mock_album ||= mock_model(Album, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all albums as @albums" do
      Album.stub(:all) { [mock_album] }
      Album.should_receive(:order).with(:title).and_return([mock_album])
      get :index
      assigns(:albums).should eq([mock_album])
    end
    
    it "assigns all artist albums as @albums" do
      Album.stub(:all) { [mock_album] }
      Album.should_receive(:order).with(:title).and_return(@albums = [mock_album])
      @albums.should_receive(:where).with({:artist_id => 1}).and_return([mock_album])
      get :index, :artist_id => 1
      assigns(:albums).should eq([mock_album])
    end
  end

  describe "GET show" do
    it "assigns the requested album as @album" do
      Album.stub(:find).with("37") { mock_album }
      get :show, :id => "37"
      assigns(:album).should be(mock_album)
    end
  end

  describe "GET new" do
    it "assigns a new album as @album" do
      Album.stub(:new) { mock_album }
      get :new
      assigns(:album).should be(mock_album)
    end
  end

  describe "GET edit" do
    it "assigns the requested album as @album" do
      @mock_user.albums.stub(:find).with("37") { mock_album }
      get :edit, :id => "37"
      assigns(:album).should be(mock_album)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created album as @album" do
        @mock_user.albums.stub(:new).with({'these' => 'params'}) { mock_album(:save => true) }
        post :create, :album => {'these' => 'params'}
        assigns(:album).should be(mock_album)
      end

      it "redirects to the created album" do
        @mock_user.albums.stub(:new) { mock_album(:save => true) }
        post :create, :album => {}
        response.should redirect_to(album_url(mock_album))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved album as @album" do
        @mock_user.albums.stub(:new).with({'these' => 'params'}) { mock_album(:save => false) }
        post :create, :album => {'these' => 'params'}
        assigns(:album).should be(mock_album)
      end

      it "re-renders the 'new' template" do
        @mock_user.albums.stub(:new) { mock_album(:save => false) }
        post :create, :album => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested album" do
        @mock_user.albums.stub(:find).with("37") { mock_album }
        mock_album.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :album => {'these' => 'params'}
      end

      it "assigns the requested album as @album" do
        @mock_user.albums.stub(:find) { mock_album(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:album).should be(mock_album)
      end

      it "redirects to the album" do
        @mock_user.albums.stub(:find) { mock_album(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(album_url(mock_album))
      end
    end

    describe "with invalid params" do
      it "assigns the album as @album" do
        @mock_user.albums.stub(:find) { mock_album(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:album).should be(mock_album)
      end

      it "re-renders the 'edit' template" do
        @mock_user.albums.stub(:find) { mock_album(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested album" do
      @mock_user.albums.stub(:find).with("37") { mock_album }
      mock_album.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the albums list" do
      @mock_user.albums.stub(:find) { mock_album }
      delete :destroy, :id => "1"
      response.should redirect_to(albums_url)
    end
  end

end
